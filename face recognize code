import cv2
import face_recognition
import numpy as np
import os
import datetime
from playsound import playsound

# Load known faces and their names
known_faces = []
known_names = []

# Load multiple known images from "known_faces" folder
known_faces_dir = "known_faces"
for filename in os.listdir(known_faces_dir):
    image_path = os.path.join(known_faces_dir, filename)
    image = face_recognition.load_image_file(image_path)
    encoding = face_recognition.face_encodings(image)[0]
    known_faces.append(encoding)
    known_names.append(os.path.splitext(filename)[0])  # Use filename as person's name

# Initialize webcam
video_capture = cv2.VideoCapture(0)

while True:
    ret, frame = video_capture.read()
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Detect faces
    face_locations = face_recognition.face_locations(rgb_frame)
    face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

    for face_encoding, (top, right, bottom, left) in zip(face_encodings, face_locations):
        matches = face_recognition.compare_faces(known_faces, face_encoding)
        name = "Unknown"

        if True in matches:
            match_index = matches.index(True)
            name = known_names[match_index]
        else:
            # Alert sound when an unknown person is detected
            playsound("alert.mp3")  # Add an alert sound file in the same directory

            # Save the unknown face image for security logs
            unknown_face = frame[top:bottom, left:right]
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            unknown_filename = f"unknown_faces/unknown_{timestamp}.jpg"

            if not os.path.exists("unknown_faces"):
                os.makedirs("unknown_faces")

            cv2.imwrite(unknown_filename, unknown_face)
            print(f"Unknown person detected! Image saved: {unknown_filename}")

        # Draw rectangle and name label
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
        cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

    # Display output
    cv2.imshow("Advanced Face Recognition", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

video_capture.release()
cv2.destroyAllWindows()
